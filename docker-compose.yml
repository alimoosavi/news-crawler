version: '3'
services:
  chrome:
    image: selenium/standalone-chrome:4.15.0
    container_name: webdriver
    ports:
      - "${SE_PORT}:${SE_PORT}"
    shm_size: "512m"
    environment:
      - SE_NODE_MAX_SESSIONS=${SE_NODE_MAX_SESSIONS}
      - SE_NODE_SESSION_TIMEOUT=${SE_NODE_SESSION_TIMEOUT}

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:${REDPANDA_VERSION}
    container_name: broker
    restart: always
    command:
      - redpanda start
      - --smp ${REDPANDA_SMP}
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:${REDPANDA_INTERNAL_PORT},external://0.0.0.0:${REDPANDA_EXTERNAL_PORT}
      - --advertise-kafka-addr internal://redpanda:${REDPANDA_INTERNAL_PORT},external://localhost:${REDPANDA_EXTERNAL_PORT}
    ports:
      - "${REDPANDA_EXTERNAL_PORT}:${REDPANDA_EXTERNAL_PORT}"
      - "${REDPANDA_ADMIN_PORT}:${REDPANDA_ADMIN_PORT}"
    volumes:
      - ./data/redpanda:/var/lib/redpanda/data

  redpanda_console:
    image: docker.redpanda.com/redpandadata/console:${REDPANDA_CONSOLE_VERSION}
    container_name: broker-console
    restart: always
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:${REDPANDA_INTERNAL_PORT}"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:${REDPANDA_ADMIN_PORT}"]
    ports:
      - "${REDPANDA_CONSOLE_PORT}:8080"
    depends_on:
      - redpanda

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "${REDISINSIGHT_PORT}:5540"   # fix: map to 5540, not 8001
    depends_on:
      - redis
    environment:
      - RI_HOST=0.0.0.0
    volumes:
      - redisinsight_data:/db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - "ES_JAVA_OPTS=${ELASTIC_JAVA_OPTS}"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    mem_limit: ${ELASTIC_MEMORY_LIMIT}
    ports:
      - "${ELASTIC_PORT}:9200"
      - "${ELASTIC_PORT_TRANSPORT}:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELASTIC_PORT}
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      - elasticsearch
    mem_limit: ${KIBANA_MEMORY_LIMIT}

  spark-master:
    image: bitnami/spark:3.2.1
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    command: ["/opt/bitnami/spark/bin/spark-class", "org.apache.spark.deploy.master.Master"]

  spark-worker:
    image: bitnami/spark:3.2.1
    container_name: spark-worker
    depends_on:
      - spark-master
      - redpanda
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1G
    volumes:
      - ./news_nlp_processor.py:/app/news_nlp_processor.py
      - ./requirements_nlp.txt:/app/requirements_nlp.txt
    command: ["/opt/bitnami/spark/bin/spark-submit", "--jars", "/opt/bitnami/spark/jars/spark-sql-kafka-0-10_2.12-3.2.1.jar", "/app/news_nlp_processor.py"]

volumes:
  redis_data:
  es_data:
  redisinsight_data:
